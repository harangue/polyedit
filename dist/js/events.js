(function() {
  var events, path;

  path = require('path');

  events = function(main) {
    var ctrlCheck, isCtrl, wheelCheck;
    $(function() {
      $(".import-dir").click(function() {
        return $(this).children('.handler').off('change').on('change', function() {
          var files;
          files = $(this)[0].files;
          if (files.length !== 0) {
            main.unsaved = true;
            main.importDirectory(files[0].path);
          }
          return $(this).val('');
        }).click(function(e) {
          return e.stopPropagation();
        }).trigger('click');
      });
      $(".import-file").click(function() {
        return $(this).children('.handler').off('change').on('change', function() {
          var file, files, i, len;
          files = $(this)[0].files;
          for (i = 0, len = files.length; i < len; i++) {
            file = files[i];
            main.unsaved = true;
            main.importFile(file.path);
          }
          return $(this).val('');
        }).click(function(e) {
          return e.stopPropagation();
        }).attr('accept', main.supportedFiles.join(',')).trigger('click');
      });
      $(".export-file").click(function() {
        var fileName, ref;
        $(".do-trigger-export").remove();
        console.log(main.data.file);
        if (((ref = main.data) != null ? ref.file : void 0) != null) {
          fileName = path.parse(main.data.file).name;
        } else {
          fileName = "";
        }
        $("body").append("<input class='do-trigger-export' type='file' nwsaveas='" + fileName + ".json' accept='.json'>");
        $('.do-trigger-export:file').change(function() {
          var files;
          files = $(this)[0].files;
          if (files.length > 0) {
            return main["export"](files[0].path);
          }
        });
        return $('.do-trigger-export').trigger('click');
      });
      $(".new-project").click(function() {
        return main.newProject();
      });
      $(".open-project").click(function() {
        return $(this).children('.handler').off('change').on('change', function() {
          var files;
          files = $(this)[0].files;
          if (files.length !== 0) {
            main.open(files[0].path);
          }
          return $(this).val('');
        }).click(function(e) {
          return e.stopPropagation();
        }).trigger('click');
      });
      $(".save-project").click(function() {
        if (main.data.file) {
          return main.save();
        } else {
          $(".do-trigger-save").remove();
          $("body").append('<input class="do-trigger-save" type="file" nwsaveas accept=".plyed">');
          $('.do-trigger-save:file').change(function() {
            var files;
            files = $(this)[0].files;
            if (files.length > 0) {
              return main.save(files[0].path);
            }
          });
          return $('.do-trigger-save').trigger('click');
        }
      });
      $('.search-box').bind("propertychange change click keyup input paste", function(e) {
        $(".sprite-listing").hide();
        return $(".sprite-listing:contains('" + ($(this).val()) + "')").show();
      });
      $("body").on('click', '.sprite-listing', function() {
        return main.setEditor($(this).attr('data-id'));
      });
      $(".exporter-box").change(function() {
        var ref, ref1;
        if ((ref = main.data) != null) {
          if ((ref1 = ref.settings) != null) {
            ref1.exporter = $(this).val();
          }
        }
        return main.unsaved = true;
      });
      $(".active-box").on('change', function() {
        if ($(this).is(':checked')) {
          return $(".sprite-listing:not(.activeSprite)").hide();
        } else {
          return $(".sprite-listing").show();
        }
      });
      $(".zoom-box").change(function() {
        return main.ui.setZoom($(".zoom-box").val());
      });
      return $(".polygon-button").click(function() {
        var polygon;
        main.unsaved = true;
        return polygon = main.ui.editor.newPolygon();
      });
    });
    interact('.left').resizable({
      edges: {
        right: true
      }
    }).on('resizemove', function(event) {
      event.preventDefault();
      $(".left").width(Math.min(Math.max(235, event.rect.width), 400));
      return $("#editor").width($(".bottom").width() - $(".left").width() - $("#properties").width() - 2);
    }).on('resizeend', function() {
      var ref, ref1;
      if ((ref = main.data) != null) {
        if ((ref1 = ref.settings) != null) {
          ref1.leftWidth = $(".left").width();
        }
      }
      return console.log(main);
    });
    interact('#properties').resizable({
      edges: {
        left: true
      }
    }).on('resizemove', function(event) {
      $("#properties").width(Math.min(Math.max(200, event.rect.width), 400));
      return $("#editor").width($(".bottom").width() - $(".left").width() - $("#properties").width() - 2);
    }).on('resizeend', function() {
      var ref, ref1;
      if ((ref = main.data) != null) {
        if ((ref1 = ref.settings) != null) {
          ref1.rightWidth = $("#properties").width();
        }
      }
      return console.log(main.data.settings, $("#properties").width());
    });
    Mousetrap.bind('ctrl+shift+i', function() {
      return gui.Window.get().showDevTools();
    });
    $("body").keydown(function(e) {
      if (e.keycode === 8) {
        return e.preventDefault();
      }
    });
    isCtrl = false;
    ctrlCheck = function(e) {
      if (e.which === 17) {
        return isCtrl = e.type === 'keydown' ? true : false;
      }
    };
    wheelCheck = function(e, delta) {
      var originalZoom;
      if (isCtrl) {
        originalZoom = parseInt($(".zoom-box").val());
        $(".zoom-box").val(Math.max(Math.min(originalZoom + delta * 25, 1000), 25));
        return main.ui.setZoom($(".zoom-box").val());
      }
    };
    return $("body").keydown(ctrlCheck).keyup(ctrlCheck).mousewheel(wheelCheck);
  };

  module.exports = events;

}).call(this);

//# sourceMappingURL=data:application/json;base64,